import copy
import functools
import json

import flask
from flask import request
import jsonpatch
import jsonpointer

import changeling.exception
import changeling.models


def get_api_key():
    try:
        return request.headers['x-changeling-api-key']
    except KeyError:
        return None


def identify(auth_api_factory):
    def wrapper(func):
        @functools.wraps(func)
        def _func(*args, **kwargs):
            api_key = get_api_key()
            api = auth_api_factory()
            user = api.get_user_by_key(api_key)
            return func(user, *args, **kwargs)
        return _func
    return wrapper


def build_response(status, data=None):
    resp = flask.Response(status=status)
    resp.mimetype = 'application/vnd.changeling.v0+json'
    if data is not None:
        resp.data = json.dumps(data)
    return resp


def build_error_response(status, message=None):
    envelope = {'message': message}
    return build_response(status, envelope)


def parse_json_request():
    mimetypes = [
        'application/json',
        'application/vnd.changeling+json',
        'application/vnd.changeling.v0+json',
    ]
    if not request.headers.get('content-type') in mimetypes:
        joined = ', '.join(mimetypes)
        msg = 'Expected Content-Type header to be one of %s' % joined
        raise ValueError(msg)

    try:
        return json.loads(request.data)
    except (ValueError, TypeError) as exc:
        raise ValueError('Unable to parse JSON: %s' % exc)


def register(app, storage, change_api_factory, auth_api_factory):
    @app.route('/schemas/change', methods=['GET'])
    def schema():
        change_api = change_api_factory(storage)
        return build_response(200, change_api.schema())

    @app.route('/changes', methods=['GET'])
    def list_changes():
        change_api = change_api_factory(storage)
        data = [change.to_dict() for change in change_api.list()]
        return build_response(200, data)

    @app.route('/changes', methods=['POST'])
    @identify(auth_api_factory)
    def create_change(user):
        try:
            data = parse_json_request()
        except ValueError as exc:
            return build_error_response(400, str(exc))

        #NOTE(bcwaldon): id should be generated by the underlying API
        if 'id' in data:
            data.pop('id')

        change_api = change_api_factory(storage, user)

        try:
            change = change_api.new(data)
        except changeling.exception.ValidationError:
            return build_error_response(400, 'Invalid change entity')
        else:
            return build_response(201, change.to_dict())

    @app.route('/changes/<change_id>', methods=['PATCH'])
    @identify(auth_api_factory)
    def patch_change(user, change_id):
        try:
            data = parse_json_request()
        except ValueError as exc:
            return build_error_response(400, str(exc))

        patch = jsonpatch.JsonPatch(data)

        change_api = change_api_factory(storage, user)

        try:
            change = change_api.get(change_id)
        except changeling.exception.ChangeNotFound:
            return build_response(404)

        document = change.to_dict()

        try:
            document = patch.apply(document)
        except jsonpatch.JsonPatchException as exc:
            msg = 'JSON Patch document error: %s' % exc
            return build_error_response(400, msg)
        except jsonpointer.JsonPointerException as exc:
            msg = 'JSON Pointer error: %s' % exc
            return build_error_response(400, msg)

        try:
            change = change_api.new(document)
        except changeling.exception.ValidationError:
            msg = 'Application of JSON Patch results in an invalid entity'
            return build_error_response(400, msg)

        change_api.extend_history(change, data)

        return build_response(200, change.to_dict())

    @app.route('/changes/<change_id>', methods=['GET'])
    def show_change(change_id):
        change_api = change_api_factory(storage)
        try:
            change = change_api.get(change_id)
        except changeling.exception.ChangeNotFound:
            return build_response(404)
        else:
            return build_response(200, change.to_dict())

    @app.route('/changes/<change_id>', methods=['DELETE'])
    def delete_change(change_id):
        change_api = change_api_factory(storage)
        try:
            change = change_api.get(change_id)
            change_api.delete(change)
        except changeling.exception.ChangeNotFound:
            return build_response(404)
        else:
            return build_response(204)

    @app.route('/changes/<change_id>/history', methods=['GET'])
    def get_change_history(change_id):
        change_api = change_api_factory(storage)
        try:
            change = change_api.get(change_id)
        except changeling.exception.ChangeNotFound:
            return build_response(404)

        history = change_api.get_history(change)
        dump = [item.to_dict() for item in history]
        return build_response(200, dump)
